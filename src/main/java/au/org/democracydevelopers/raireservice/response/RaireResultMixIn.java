/*
Copyright 2024 Democracy Developers

The Raire Service is designed to connect colorado-rla and its associated database to
the raire assertion generation engine (https://github.com/DemocracyDevelopers/raire-java).

This file is part of raire-service.

raire-service is free software: you can redistribute it and/or modify it under the terms
of the GNU Affero General Public License as published by the Free Software Foundation, either
version 3 of the License, or (at your option) any later version.

raire-service is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License along with
raire-service. If not, see <https://www.gnu.org/licenses/>.
*/

package au.org.democracydevelopers.raireservice.response;

import au.org.democracydevelopers.raire.algorithm.RaireResult;
import au.org.democracydevelopers.raire.assertions.AssertionAndDifficulty;
import au.org.democracydevelopers.raire.time.TimeTaken;
import com.fasterxml.jackson.annotation.JsonIgnore;

/**
 * Mixin for the raire-java class RaireResult. When raire-service serialises RaireResult as part of a
 * RaireSolution, we want to ignore some RaireResult attributes as this data is not stored in
 * the colorado-rla database.
 * The only purpose of this class is to ignore certain fields of RaireResult when serializing.
 */
public class RaireResultMixIn extends RaireResult {

  /**
   * The winner of an IRV contest is not stored in the colorado-rla database.
   */
  @JsonIgnore public int winner;

  /**
   * raire-service includes the candidates of a contest in the metadata attached to a RaireSolution.
   */
  @JsonIgnore public int num_candidates;

  /**
   * The time that raire-java takes to determine the winner of an IRV contest is not stored in
   * the colorado-rla database.
   */
  @JsonIgnore public TimeTaken time_to_determine_winners;

  /**
   * The time that raire-java takes to find assertions for an IRV contest is not stored in
   * the colorado-rla database.
   */
  @JsonIgnore public TimeTaken time_to_find_assertions;

  /**
   * The time that raire-java takes to trim the assertions generated for an IRV contest is not
   * stored in the colorado-rla database.
   */
  @JsonIgnore public TimeTaken time_to_trim_assertions;

  /**
   * Any warnings generated by raire-java when generating assertions is not stored in the
   * colorado-rla database.
   */
  @JsonIgnore public boolean warning_trim_timed_out;

  /**
   * Constructor - make a RaireResultMixin from the attributes we care about and intend to serialize.
   * Create the superclass by inserting default values for the unspecified fields (winner, times taken,
   * trim warning) - these will not be serialized.
   * @param assertions the assertions with difficulties.
   * @param difficulty the highest difficulty.
   * @param margin the lowest margin.
   * @param num_candidates the number of candidates in the contest.
   */
  public RaireResultMixIn(
      AssertionAndDifficulty[] assertions,
      double difficulty, int margin, int num_candidates) {
    super(assertions, difficulty, margin, -1, num_candidates, new TimeTaken(0,0),
        new TimeTaken(0,0), new TimeTaken(0,0), false);
  }
}
